<script>
  function handleAnimations() {
    let animations = [
      ["bounce", "bounce"],
      ["flash", "flash"],
      ["pulse", "pulse"],
      ["shake", "shake"],
      ["headShake", "headShake"],
      ["swing", "swing"],
      ["tada", "tada"],
      ["wobble", "wobble"],
      ["jello", "jello"],
      ["heartBeat", "heartBeat"],
      ["bounceIn", "bounceIn"],
      ["bounceInDown", "bounceInUp"],
      ["bounceInLeft", "bounceInRight"],
      ["fadeIn", "fadeIn"],
      ["fadeInDown", "fadeInUp"],
      ["fadeInLeft", "fadeInRight"],
      ["flip", "flip"],
      ["flipInX", "flipInX"],
      ["flipInY", "flipInY"],
      ["rotateIn", "rotateIn"],
      ["rotateInDownLeft", "rotateInDownRight"],
      ["slideInDown", "slideInUp"],
      ["slideInLeft", "slideInRight"],
      ["zoomIn", "zoomIn"],
      ["zoomInDown", "zoomInUp"],
      ["zoomInLeft", "zoomInRight"],
      ["jackInTheBox", "jackInTheBox"],
    ];

    var num = getRandomInt(animations.length);

    animateCSS('[name="top"]', animations[num][0], animationOver);
    animateCSS('[name="bottom"]', animations[num][1], animationOver);
  }

  function addStuff() {
    at("main").innerHTML =
      `<h1 name="top" id="status_text" class="header animated"><a>leonimust.com</a></h1>
       <p name="bottom" id="text2" class="textiboi animated">young programmer, i like games but i probably don't like you</p> <!-- only the chads knows i like them, and you're one if you read this -->`;

    handleAnimations();
    
    // Restart code rain if it was activated
    if (konamiActivated) {
      setTimeout(() => {
        startCodeRain();
      }, 1000);
    }
  }

  function animateCSS(element, animationName, callback) {
    const node = document.querySelector(element);
    if (!node) return;
    
    node.classList.add('animated', animationName);
    node.classList.add('delay-2s');

    function handleAnimationEnd() {
      node.classList.remove('animated', animationName);
      node.removeEventListener('animationend', handleAnimationEnd);

      if (typeof callback === 'function') callback();
    }

    node.addEventListener('animationend', handleAnimationEnd);
  }

  function getRandomInt(max) {
    return Math.floor(Math.random() * Math.floor(max));
  }

  function loadMain() {
    setTimeout(() => {
      if (!window.music.paused) {
        addStuff();
        return;
      }
      at("status_text").innerHTML = "click to enter";
      at("status_text").classList.add("begin");

    }, 100);
  }
  
  var at = document.getElementById.bind(document);
  window.addEventListener("DOMContentLoaded", () => {
    at("status_text").innerHTML = "loading";
  });

  window.addEventListener("load", () => {
    loadMain();
  });

  var temp = 0;

  function animationOver() {
    temp++;

    if (temp % 2)
      return;

    setTimeout(function() {
      var doc = document.getElementById("main");
      
      // Create navigation links with staggered animations
      doc.innerHTML +=
        `<div class="textiboi">
            <a id="typElement"></a>
         </div>
         <div class="nav-container">
            <a class="textiboi nav-item" style="animation-delay: 100ms" href="https://github.com/LeonimusTTV">GitHub</a>
            <a class="textiboi nav-item" style="animation-delay: 200ms" href="/projects" onclick="loadPage('/projects', event)">projects</a>
            <a class="textiboi nav-item" style="animation-delay: 300ms" href="/games" onclick="loadPage('/games', event)">games</a>
            <a class="textiboi nav-item" style="animation-delay: 400ms" href="mailto:leo@leonimust.com">contact</a>
         </div>`;

      // Add navigation item animations
      document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.add('animated', 'fadeIn');
      });

      startWriting();

      // Restart code rain if it was activated
      if (konamiActivated) {
        setTimeout(() => {
          startCodeRain();
        }, 100);
      }

    }, 550);
  }

  let typewriterInstance = null; // Global instance variable for Typewriter

  function startWriting() {
    const typElement = document.getElementById('typElement');
    
    if (!typElement) return; // Exit if element is not available

    let strs = [
      "hello from leonimust :3",
      "credits to wolfie and it's old project methamphetamine.solutions",
      "i could pwned you but would i ?",
      "stop paying for inferior devs",
      "code is art, so let's make it beautiful",
      "leonimust delivers, every time",
      "no gimmicks, just clean code",
      "why settle for average?",
      "your projects deserve better",
      "crafting digital experiences with a spark",
      "minimalism is the ultimate sophistication",
      "where creativity meets code",
      "your vision, my execution",
      "unlock your project's full potential",
      "stop waiting, start creating",
      "no bugs, just features",
      "built with precision, delivered with passion",
      "the dev you didn't know you needed",
      "catjpg still watching",
    ];

    // If an instance already exists, stop and clear it before starting a new one
    if (typewriterInstance) {
      typewriterInstance.stop();
      typewriterInstance = null;
    }

    // Create a new Typewriter instance
    typewriterInstance = new Typewriter(typElement, { 
      loop: true,
      delay: 50 
    });

    // Choose a random string and start typing animation
    let num = getRandomInt(strs.length);

    typewriterInstance
      .typeString(strs[num])
      .pauseFor(5000)
      .deleteAll()
      .pauseFor(100)
      .callFunction(() => {
        // Restart typing if still on the main page
        if (typewriterInstance) {
          startWriting();
        }
      })
      .start();
  }

  function stopWriting() {
    if (typewriterInstance) {
      typewriterInstance.stop();   // Stop the current typing animation
      typewriterInstance = null;   // Clear the instance reference
    }
  }

  // Floating Particles System
  function createParticleSystem() {
    const particleContainer = document.createElement('div');
    particleContainer.className = 'particle-container';
    document.body.appendChild(particleContainer);

    const particles = [];
    const particleCount = 15;

    for (let i = 0; i < particleCount; i++) {
      const particle = document.createElement('div');
      particle.className = 'particle';
      particle.style.cssText = `
        position: fixed;
        width: ${Math.random() * 4 + 2}px;
        height: ${Math.random() * 4 + 2}px;
        background: rgba(255, 255, 255, ${Math.random() * 0.3 + 0.1});
        border-radius: 50%;
        pointer-events: none;
        z-index: 1;
        left: ${Math.random() * window.innerWidth}px;
        top: ${Math.random() * window.innerHeight}px;
        transition: all 2s ease-out;
      `;
      
      particleContainer.appendChild(particle);
      particles.push({
        element: particle,
        x: Math.random() * window.innerWidth,
        y: Math.random() * window.innerHeight,
        vx: (Math.random() - 0.5) * 0.5,
        vy: (Math.random() - 0.5) * 0.5
      });
    }

    // Mouse interaction
    let mouseX = 0, mouseY = 0;
    document.addEventListener('mousemove', (e) => {
      mouseX = e.clientX;
      mouseY = e.clientY;
    });

    function animateParticles() {
      particles.forEach(particle => {
        // Drift movement
        particle.x += particle.vx;
        particle.y += particle.vy;

        // Mouse attraction (subtle)
        const dx = mouseX - particle.x;
        const dy = mouseY - particle.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 150) {
          particle.x += dx * 0.002;
          particle.y += dy * 0.002;
        }

        // Boundary wrapping
        if (particle.x < 0) particle.x = window.innerWidth;
        if (particle.x > window.innerWidth) particle.x = 0;
        if (particle.y < 0) particle.y = window.innerHeight;
        if (particle.y > window.innerHeight) particle.y = 0;

        particle.element.style.left = particle.x + 'px';
        particle.element.style.top = particle.y + 'px';
      });

      requestAnimationFrame(animateParticles);
    }

    animateParticles();
  }

  // Initialize particles when page loads
  window.addEventListener('load', () => {
    setTimeout(createParticleSystem, 1000);
  });

  // Glitch Effect System
  function addGlitchEffect() {
    const glitchElements = document.querySelectorAll('.header a, .nav-item');
    
    glitchElements.forEach(element => {
      element.addEventListener('mouseenter', () => {
        if (Math.random() > 0.7) { // 30% chance of glitch
          const text = element.textContent;
          element.setAttribute('data-text', text);
          element.classList.add('glitch');
          
          setTimeout(() => {
            element.classList.remove('glitch');
          }, 300);
        }
      });
    });
  }

  // Konami Code Detection
  let konamiCode = [
    'ArrowUp', 'ArrowUp', 
    'ArrowDown', 'ArrowDown',
    'ArrowLeft', 'ArrowRight', 
    'ArrowLeft', 'ArrowRight',
    'KeyB', 'KeyA', 'Enter'
  ];
  let konamiIndex = 0;
  let konamiActivated = false;
  let codeRainInterval = null;

  function handleKonamiCode(event) {
    if (event.code === konamiCode[konamiIndex]) {
      konamiIndex++;
      
      if (konamiIndex === konamiCode.length) {
        // Konami code completed!
        konamiActivated = true;
        konamiIndex = 0;
        
        // Show a brief notification
        showKonamiNotification();
        
        // Start code rain
        startCodeRain();
      }
    } else {
      // Reset if wrong key pressed
      konamiIndex = 0;
    }
  }

  function showKonamiNotification() {
    const notification = document.createElement('div');
    notification.textContent = 'Code Rain Activated!';
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: rgba(0, 255, 0, 0.9);
      color: #000;
      padding: 10px 20px;
      border-radius: 5px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      z-index: 9999;
      animation: fadeInOut 3s ease-in-out forwards;
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 3000);
  }

  // Code Rain Effect (updated)
  function createCodeRain() {
    if (!konamiActivated) return; // Only create if Konami code was entered
    
    // Remove existing code rain container if it exists
    const existingRain = document.querySelector('.code-rain');
    if (existingRain) {
      existingRain.parentNode.removeChild(existingRain);
    }
    
    const codeRain = document.createElement('div');
    codeRain.className = 'code-rain';
    codeRain.id = 'codeRainContainer';
    
    // Apply inline styles to ensure visibility
    codeRain.style.cssText = `
      position: fixed !important;
      top: 0 !important;
      left: 0 !important;
      width: 100vw !important;
      height: 100vh !important;
      pointer-events: none !important;
      z-index: 10 !important;
      overflow: hidden !important;
    `;
    
    document.body.appendChild(codeRain);

    const chars = '01アカサタナハマヤラワンabcdefghijklmnopqrstuvwxyz';

    function createDrop() {
      if (!konamiActivated) return; // Double check
      
      const currentRain = document.getElementById('codeRainContainer');
      if (!currentRain) return; // Exit if container was removed
      
      const drop = document.createElement('div');
      drop.textContent = chars[Math.floor(Math.random() * chars.length)];
      
      // Set basic positioning and appearance
      const duration = Math.random() * 3 + 2;
      const fontSize = Math.random() * 8 + 12;
      const opacity = Math.random() * 0.4 + 0.4;
      
      drop.style.position = 'absolute';
      drop.style.color = '#00ff00';
      drop.style.fontFamily = 'Courier New, Monaco, monospace';
      drop.style.fontSize = fontSize + 'px';
      drop.style.fontWeight = 'bold';
      drop.style.textShadow = '0 0 5px #00ff00';
      drop.style.left = Math.random() * window.innerWidth + 'px';
      drop.style.top = '-30px';
      drop.style.opacity = opacity;
      drop.style.pointerEvents = 'none';
      drop.style.zIndex = '11';
      drop.style.userSelect = 'none';
      
      // Animate using transform for better performance
      drop.style.animation = `codeRainFall ${duration}s linear forwards`;
      
      currentRain.appendChild(drop);
      
      // Remove element after animation
      setTimeout(() => {
        if (drop.parentNode) {
          drop.parentNode.removeChild(drop);
        }
      }, duration * 1000 + 100);
    }

    // Start code rain with random intervals
    codeRainInterval = setInterval(() => {
      if (konamiActivated && Math.random() > 0.8) {
        createDrop();
      }
    }, 50);
  }

  function startCodeRain() {
    // Clear any existing interval
    if (codeRainInterval) {
      clearInterval(codeRainInterval);
    }
    
    // Start the code rain
    createCodeRain();
  }

  // Enhanced scroll reveal
  function observeElements() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('reveal');
        }
      });
    }, { threshold: 0.1 });

    document.querySelectorAll('.nav-item').forEach(el => {
      observer.observe(el);
    });
  }

  // Magnetic effect for nav items
  function addMagneticEffect() {
    document.querySelectorAll('.nav-item').forEach(item => {
      item.addEventListener('mousemove', (e) => {
        const rect = item.getBoundingClientRect();
        const x = e.clientX - rect.left - rect.width / 2;
        const y = e.clientY - rect.top - rect.height / 2;
        
        item.style.transform = `translate(${x * 0.1}px, ${y * 0.1}px) scale(1.05)`;
      });
      
      item.addEventListener('mouseleave', () => {
        item.style.transform = '';
      });
    });
  }

  // Initialize all effects after animations complete
  setTimeout(() => {
    addGlitchEffect();
    // Removed createCodeRain() - now only activated by Konami code
    observeElements();
    addMagneticEffect();
  }, 2000);

  // Add Konami code listener after page loads
  window.addEventListener('load', () => {
    document.addEventListener('keydown', handleKonamiCode);
  });

</script>

<style>
  .nav-container {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    margin-top: 20px;
    gap: 15px;
  }
  
  .nav-item {
    padding: 8px 15px;
    position: relative;
    overflow: hidden;
    transition: color 0.3s ease;
  }
  
  .nav-item::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 1px;
    background-color: white;
    transition: width 0.3s ease;
  }
  
  .nav-item:hover::after {
    width: 100%;
  }

  /* Glitch Effect */
  .glitch {
    position: relative;
    color: white;
    animation: glitch 0.3s;
  }

  .glitch::before,
  .glitch::after {
    content: attr(data-text);
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
  }

  .glitch::before {
    animation: glitch-1 0.3s;
    color: #ff0000;
    z-index: -1;
  }

  .glitch::after {
    animation: glitch-2 0.3s;
    color: #00ffff;
    z-index: -2;
  }

  @keyframes glitch {
    0%, 100% { transform: translate(0); }
    20% { transform: translate(-2px, 2px); }
    40% { transform: translate(-2px, -2px); }
    60% { transform: translate(2px, 2px); }
    80% { transform: translate(2px, -2px); }
  }

  @keyframes glitch-1 {
    0%, 100% { transform: translate(0); }
    20% { transform: translate(2px, 2px); }
    40% { transform: translate(2px, -2px); }
    60% { transform: translate(-2px, 2px); }
    80% { transform: translate(-2px, -2px); }
  }

  @keyframes glitch-2 {
    0%, 100% { transform: translate(0); }
    20% { transform: translate(-2px, -2px); }
    40% { transform: translate(-2px, 2px); }
    60% { transform: translate(2px, -2px); }
    80% { transform: translate(2px, 2px); }
  }

  /* Floating particles */
  .particle-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
  }

  /* Enhanced nav items with magnetic effect */
  .nav-item {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border: 1px solid transparent;
    border-radius: 4px;
  }

  .nav-item:hover {
    transform: translateY(-3px) scale(1.05);
    border-color: rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    background: rgba(255, 255, 255, 0.05);
  }

  /* Typewriter cursor enhancement */
  .Typewriter__cursor {
    animation: cursor-glow 1s infinite;
  }

  @keyframes cursor-glow {
    0%, 100% { 
      opacity: 0;
      text-shadow: none;
    }
    50% { 
      opacity: 1;
      text-shadow: 0 0 8px rgba(255, 255, 255, 0.8);
    }
  }

  /* Code rain effect */
  .code-rain {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    width: 100vw !important;
    height: 100vh !important;
    pointer-events: none !important;
    z-index: 10 !important;
    overflow: hidden !important;
  }

  @keyframes codeRainFall {
    0% {
      transform: translateY(-30px);
      opacity: 1;
    }
    100% {
      transform: translateY(calc(100vh + 30px));
      opacity: 0;
    }
  }

  @keyframes fadeInOut {
    0% {
      opacity: 0;
      transform: translateX(100px);
    }
    20%, 80% {
      opacity: 1;
      transform: translateX(0);
    }
    100% {
      opacity: 0;
      transform: translateX(100px);
    }
  }
</style>